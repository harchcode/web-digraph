{"id":"../../node_modules/@webcomponents/custom-elements/src/native-shim.js","dependencies":[{"name":"/Users/hartonochandra/try/web-digraph/node_modules/@webcomponents/custom-elements/src/native-shim.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/hartonochandra/try/web-digraph/package.json","includedInParent":true,"mtime":1600501750319},{"name":"/Users/hartonochandra/try/web-digraph/node_modules/@webcomponents/custom-elements/package.json","includedInParent":true,"mtime":1600501750097}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\n/**\n * This shim allows elements written in, or compiled to, ES5 to work on native\n * implementations of Custom Elements v1. It sets new.target to the value of\n * this.constructor so that the native HTMLElement constructor can access the\n * current under-construction element's definition.\n */\n(function () {\n    if (\n    // No Reflect, no classes, no need for shim because native custom elements\n    // require ES2015 classes or Reflect.\n    window.Reflect === undefined || window.customElements === undefined ||\n        // The webcomponentsjs custom elements polyfill doesn't require\n        // ES2015-compatible construction (`super()` or `Reflect.construct`).\n        window.customElements.polyfillWrapFlushCallback) {\n        return;\n    }\n    const BuiltInHTMLElement = HTMLElement;\n    /**\n     * With jscompiler's RECOMMENDED_FLAGS the function name will be optimized away.\n     * However, if we declare the function as a property on an object literal, and\n     * use quotes for the property name, then closure will leave that much intact,\n     * which is enough for the JS VM to correctly set Function.prototype.name.\n     */\n    const wrapperForTheName = {\n        'HTMLElement': function HTMLElement() {\n            return Reflect.construct(BuiltInHTMLElement, [], this.constructor);\n        }\n    };\n    window.HTMLElement =\n        wrapperForTheName['HTMLElement'];\n    HTMLElement.prototype = BuiltInHTMLElement.prototype;\n    HTMLElement.prototype.constructor = HTMLElement;\n    Object.setPrototypeOf(HTMLElement, BuiltInHTMLElement);\n})();\n"},"sourceMaps":{"js":{"version":3,"file":"native-shim.js","sourceRoot":"","sources":["../ts_src/native-shim.ts"],"names":[],"mappings":";AAAA;;;;;;;;;GASG;AAEH;;;;;GAKG;AACH,CAAC;IACD;IACI,0EAA0E;IAC1E,qCAAqC;IACrC,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,MAAM,CAAC,cAAc,KAAK,SAAS;QACnE,+DAA+D;QAC/D,qEAAqE;QACrE,MAAM,CAAC,cAAc,CAAC,yBAAyB,EAAE;QACnD,OAAO;KACR;IACD,MAAM,kBAAkB,GAAG,WAAW,CAAC;IAEvC;;;;;OAKG;IACH,MAAM,iBAAiB,GAAG;QACxB,aAAa,EAAE,SAAS,WAAW;YACjC,OAAO,OAAO,CAAC,SAAS,CAAC,kBAAkB,EAAE,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACrE,CAAC;KACF,CAAC;IACF,MAAM,CAAC,WAAW;QACd,iBAAiB,CAAC,aAAa,CAAkC,CAAC;IACtE,WAAW,CAAC,SAAS,GAAG,kBAAkB,CAAC,SAAS,CAAC;IACrD,WAAW,CAAC,SAAS,CAAC,WAAW,GAAG,WAAW,CAAC;IAChD,MAAM,CAAC,cAAc,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;AACvD,CAAC,CAAC,EAAE,CAAC","sourcesContent":[null]}},"error":null,"hash":"56d8a1f5f00568818b49dbdf5b9a5200","cacheData":{"env":{}}}